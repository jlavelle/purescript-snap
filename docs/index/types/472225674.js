// This file was generated by purescript-docs-search
window.DocsSearchTypeIndex["472225674"] = [{"values":[{"sourceSpan":{"start":[40,1],"name":".spago/profunctor-lenses/v6.3.0/src/Data/Lens/Common.purs","end":[40,54]},"score":1,"packageInfo":{"values":["profunctor-lenses"],"tag":"Package"},"name":"simple","moduleName":"Data.Lens.Common","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["p",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"Optic'"]},{"tag":"TypeVar","contents":"p"}]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"Optic'"]},{"tag":"TypeVar","contents":"p"}]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"This is useful for when you want to restrict the type of another optic.\nFor example, suppose you have the following declarations:\n```purescript\nnewtype X = X Int\nderive instance newtypeX :: Newtype X _\n```\n\nAttempting to view with the `_Newtype` optic:\n```purescript\nX 42 ^. _Newtype\n```\nWill result in a type error:\n```\n The inferred type\n   forall t3 t5. Newtype t3 t5 => Int\n has type variables which are not mentioned in the body of the type.\n Consider adding a type annotation.\n```\n\nHowever, if we apply the `simple` function:\n```purescript\n X 42 ^. simple _Newtype\n```\nWe get the expected result `42`.\n"}],"tag":"SearchResult"}]