// This file was generated by purescript-docs-search
window.DocsSearchTypeIndex["662790779"] = [{"values":[{"sourceSpan":{"start":[141,1],"name":".spago/snap/v0.1.0/src/Snap/Component/SYTC.purs","end":[141,48]},"score":0,"packageInfo":{"values":["snap"],"tag":"Package"},"name":"poly","moduleName":"Snap.Component.SYTC","info":{"values":[{"type":{"tag":"ForAll","contents":["u",{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"v"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Snap","Component","SYTC"],"Cmp"]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"v"}]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"u"}]}]},null]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[34,1],"name":".spago/snap/v0.1.0/src/Snap/Component/SYTC.purs","end":[34,50]},"score":0,"packageInfo":{"values":["snap"],"tag":"Package"},"name":"mempty","moduleName":"Snap.Component.SYTC","info":{"values":[{"type":{"tag":"ForAll","contents":["u",{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"v"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Snap","Component","SYTC"],"Cmp"]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"v"}]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"u"}]}]},null]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[11,1],"name":".spago/profunctor-lenses/v6.3.0/src/Data/Lens/Iso/Newtype.purs","end":[11,70]},"score":1,"packageInfo":{"values":["profunctor-lenses"],"tag":"Package"},"name":"_Newtype","moduleName":"Data.Lens.Iso.Newtype","info":{"values":[{"type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Newtype"],"Newtype"],"constraintArgs":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Newtype"],"Newtype"],"constraintArgs":[{"tag":"TypeVar","contents":"s"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"Iso"]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"An Iso between a newtype and its inner type.\nSupports switching between different types that have instances of the\nNewtype type class.\nIf you don't need to change types, you may have a better experience with\ntype inference if you use `simple _Newtype`.\n"}],"tag":"SearchResult"}]